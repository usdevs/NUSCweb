generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id               Int         @id @default(autoincrement())
    name             String
    telegramId       String?     @unique
    telegramUserName String
    telegramDpUrl    String?
    userOrg          UserOnOrg[]
    deleted          Boolean     @default(false) // supports soft delete
    deletedAt        DateTime?
}

enum IGCategory {
    Sports
    SocioCultural
    Others
    Guips
}

model Organisation {
    id          Int         @id @default(autoincrement())
    name        String
    description String      @default("An NUSC organisation")
    isAdminOrg  Boolean     @default(false)
    bookings    Booking[]
    events      Event[]
    userOrg     UserOnOrg[]
    inviteToken String      @default(uuid())
    slug        String      @unique
    category    IGCategory
    isInactive  Boolean     @default(false)
    isInvisible Boolean     @default(false) // is not displayed on the website
}

model UserOnOrg {
    user       User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId     Int
    org        Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    orgId      Int
    assignedAt DateTime     @default(now())
    bookings   Booking[]
    events     Event[]
    deleted    Boolean      @default(false) // supports soft delete
    deletedAt  DateTime?

    @@id([userId, orgId])
}

model Venue {
    id      Int       @id @default(autoincrement())
    name    String
    booking Booking[]
}

model Booking {
    id             Int          @id @default(autoincrement())
    eventName      String
    venue          Venue        @relation(fields: [venueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    venueId        Int
    bookedBy       UserOnOrg    @relation(fields: [userId, userOrgId], references: [userId, orgId], onDelete: Cascade, onUpdate: Cascade)
    userId         Int
    userOrgId      Int
    bookedForOrg   Organisation @relation(fields: [bookedForOrgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    bookedForOrgId Int // this field will only be populated if a user (typically an admin user) has made a booking on behalf of another org
    start          DateTime
    end            DateTime
    bookedAt       DateTime     @default(now())
    event          Event?
    deleted        Boolean      @default(false) // supports soft delete
    deletedAt      DateTime?
}

model Event {
    id             Int          @id @default(autoincrement())
    eventName      String
    bookedBy       UserOnOrg    @relation(fields: [userId, userOrgId], references: [userId, orgId], onDelete: Cascade, onUpdate: Cascade)
    userId         Int
    userOrgId      Int
    bookedForOrg   Organisation @relation(fields: [bookedForOrgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    bookedForOrgId Int // this field will only be populated if a user (typically an admin user) has made a booking on behalf of another org
    start          DateTime
    end            DateTime
    bookedAt       DateTime     @default(now())
    booking        Booking?     @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    bookingId      Int?         @unique
    deleted        Boolean      @default(false) // supports soft delete
    deletedAt      DateTime?
}

model Course {
    code            String           @id
    name            String
    courseOfferings CourseOffering[]
}

model Professor {
    id              Int              @id @default(autoincrement())
    name            String           @unique
    courseOfferings CourseOffering[]
}

enum Semester {
    Semester1
    Semester2
}

model CourseOffering {
    id           Int          @id @default(autoincrement())
    course       Course       @relation(fields: [courseCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
    courseCode   String
    professor    Professor    @relation(fields: [professorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    professorId  Int
    semester     Semester
    academicYear Int
    submissions  Submission[]

    @@unique([courseCode, professorId, semester, academicYear])
}

model Student {
    id              Int          @id @default(autoincrement())
    matriculationNo String       @unique
    name            String
    submissions     Submission[]
}

model Submission {
    id               Int            @id @default(autoincrement())
    title            String
    text             String
    lastUpdated      DateTime       @default(now())
    isPublished      Boolean        @default(false)
    student          Student        @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    studentId        Int
    courseOffering   CourseOffering @relation(fields: [courseOfferingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    courseOfferingId Int
}
