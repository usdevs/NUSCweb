generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id               Int         @id @default(autoincrement())
    name             String
    telegramId       String      @unique @map("telegram_id")
    telegramUserName String      @map("telegram_user_name")
    userOrgs         UserOnOrg[]
    deleted          Boolean     @default(false) // supports soft delete
    deletedAt        DateTime?   @map("deleted_at")

    @@map("users")
}

enum IGCategory {
    Sports
    SocioCultural
    Welfare
    Guips
    Others
}

model Organisation {
    id          Int         @id @default(autoincrement())
    name        String
    description String      @default("An NUSC organisation")
    isAdminOrg  Boolean     @default(false) @map("is_admin_org")
    bookings    Booking[]
    events      Event[]
    userOrgs    UserOnOrg[]
    inviteToken String      @unique @default(uuid()) @map("invite_token")
    telegramUrl String?     @map("telegram_url")
    category    IGCategory
    isInactive  Boolean     @default(false) @map("is_inactive")
    isInvisible Boolean     @default(false) @map("is_invisible") // is not displayed on the website

    @@map("organisations")
}

model UserOnOrg {
    user       User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId     Int          @map("user_id")
    org        Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    orgId      Int          @map("org_id")
    assignedAt DateTime     @default(now()) @map("assigned_at")
    bookings   Booking[]
    events     Event[]
    deleted    Boolean      @default(false) // supports soft delete
    deletedAt  DateTime?    @map("deleted_at")

    @@id([userId, orgId])
    @@map("user_on_org")
}

model Venue {
    id       Int       @id @default(autoincrement())
    name     String
    bookings Booking[]

    @@map("venues")
}

model Booking {
    id             Int          @id @default(autoincrement())
    bookingName    String       @map("booking_name")
    venue          Venue        @relation(fields: [venueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    venueId        Int          @map("venue_id")
    bookedBy       UserOnOrg    @relation(fields: [userId, userOrgId], references: [userId, orgId], onDelete: Cascade, onUpdate: Cascade)
    userId         Int          @map("user_id")
    userOrgId      Int          @map("user_org_id")
    bookedForOrg   Organisation @relation(fields: [bookedForOrgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    bookedForOrgId Int          @map("booked_for_org_id")
    start          DateTime
    end            DateTime
    bookedAt       DateTime     @default(now()) @map("booked_at")
    event          Event?
    deleted        Boolean      @default(false) // supports soft delete
    deletedAt      DateTime?    @map("deleted_at")

    @@map("bookings")
}

model Event {
    id             Int          @id @default(autoincrement())
    eventName      String       @map("event_name")
    bookedBy       UserOnOrg    @relation(fields: [userId, userOrgId], references: [userId, orgId], onDelete: Cascade, onUpdate: Cascade)
    userId         Int          @map("user_id")
    userOrgId      Int          @map("user_org_id")
    bookedForOrg   Organisation @relation(fields: [bookedForOrgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    bookedForOrgId Int          @map("booked_for_org_id")
    start          DateTime
    end            DateTime
    bookedAt       DateTime     @default(now()) @map("booked_at")
    booking        Booking?     @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    bookingId      Int?         @unique @map("booking_id")
    deleted        Boolean      @default(false) // supports soft delete
    deletedAt      DateTime?    @map("deleted_at")

    @@map("events")
}
